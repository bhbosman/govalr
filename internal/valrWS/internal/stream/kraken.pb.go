// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: kraken.proto

package stream

import (
	context "context"
	stream "github.com/bhbosman/gocommon/stream"
	goerrors "github.com/bhbosman/goerrors"
	goprotoextra "github.com/bhbosman/goprotoextra"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	any "github.com/golang/protobuf/ptypes/any"
	proto1 "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KrakenSubscriptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth    uint32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Interval uint32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Snapshot bool   `protobuf:"varint,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Token    string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *KrakenSubscriptionData) Reset() {
	*x = KrakenSubscriptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenSubscriptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenSubscriptionData) ProtoMessage() {}

func (x *KrakenSubscriptionData) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenSubscriptionData.ProtoReflect.Descriptor instead.
func (*KrakenSubscriptionData) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{0}
}

func (x *KrakenSubscriptionData) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *KrakenSubscriptionData) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *KrakenSubscriptionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KrakenSubscriptionData) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

func (x *KrakenSubscriptionData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (self *KrakenSubscriptionData) TypeCode() uint32 {
	return KrakenSubscriptionDataTypeCode
}

type KrakenWsMessageIncoming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionID uint64                  `protobuf:"varint,1,opt,name=connectionID,proto3" json:"connectionID,omitempty"`
	Event        string                  `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Status       string                  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Version      string                  `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Reqid        uint32                  `protobuf:"varint,5,opt,name=reqid,proto3" json:"reqid,omitempty"`
	ChannelID    uint32                  `protobuf:"varint,6,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ChannelName  string                  `protobuf:"bytes,7,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Pair         string                  `protobuf:"bytes,8,opt,name=pair,proto3" json:"pair,omitempty"`
	Subscription *KrakenSubscriptionData `protobuf:"bytes,9,opt,name=subscription,proto3" json:"subscription,omitempty"`
	ErrorMessage string                  `protobuf:"bytes,10,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *KrakenWsMessageIncoming) Reset() {
	*x = KrakenWsMessageIncoming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenWsMessageIncoming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenWsMessageIncoming) ProtoMessage() {}

func (x *KrakenWsMessageIncoming) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenWsMessageIncoming.ProtoReflect.Descriptor instead.
func (*KrakenWsMessageIncoming) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{1}
}

func (x *KrakenWsMessageIncoming) GetConnectionID() uint64 {
	if x != nil {
		return x.ConnectionID
	}
	return 0
}

func (x *KrakenWsMessageIncoming) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *KrakenWsMessageIncoming) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KrakenWsMessageIncoming) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KrakenWsMessageIncoming) GetReqid() uint32 {
	if x != nil {
		return x.Reqid
	}
	return 0
}

func (x *KrakenWsMessageIncoming) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *KrakenWsMessageIncoming) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *KrakenWsMessageIncoming) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *KrakenWsMessageIncoming) GetSubscription() *KrakenSubscriptionData {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *KrakenWsMessageIncoming) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (self *KrakenWsMessageIncoming) TypeCode() uint32 {
	return KrakenWsMessageIncomingTypeCode
}

type KrakenWsMessageOutgoing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event        string                  `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Reqid        uint32                  `protobuf:"varint,2,opt,name=reqid,proto3" json:"reqid,omitempty"`
	Pair         []string                `protobuf:"bytes,3,rep,name=pair,proto3" json:"pair,omitempty"`
	Subscription *KrakenSubscriptionData `protobuf:"bytes,4,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *KrakenWsMessageOutgoing) Reset() {
	*x = KrakenWsMessageOutgoing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenWsMessageOutgoing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenWsMessageOutgoing) ProtoMessage() {}

func (x *KrakenWsMessageOutgoing) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenWsMessageOutgoing.ProtoReflect.Descriptor instead.
func (*KrakenWsMessageOutgoing) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{2}
}

func (x *KrakenWsMessageOutgoing) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *KrakenWsMessageOutgoing) GetReqid() uint32 {
	if x != nil {
		return x.Reqid
	}
	return 0
}

func (x *KrakenWsMessageOutgoing) GetPair() []string {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *KrakenWsMessageOutgoing) GetSubscription() *KrakenSubscriptionData {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (self *KrakenWsMessageOutgoing) TypeCode() uint32 {
	return KrakenWsMessageOutgoingTypeCode
}

type TickerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A []*any.Any `protobuf:"bytes,1,rep,name=a,proto3" json:"a,omitempty"`
	B []*any.Any `protobuf:"bytes,2,rep,name=b,proto3" json:"b,omitempty"`
	V []*any.Any `protobuf:"bytes,3,rep,name=v,proto3" json:"v,omitempty"`
	L []*any.Any `protobuf:"bytes,4,rep,name=l,proto3" json:"l,omitempty"`
	H []*any.Any `protobuf:"bytes,5,rep,name=h,proto3" json:"h,omitempty"`
	O []*any.Any `protobuf:"bytes,6,rep,name=o,proto3" json:"o,omitempty"`
}

func (x *TickerInformation) Reset() {
	*x = TickerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerInformation) ProtoMessage() {}

func (x *TickerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerInformation.ProtoReflect.Descriptor instead.
func (*TickerInformation) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{3}
}

func (x *TickerInformation) GetA() []*any.Any {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *TickerInformation) GetB() []*any.Any {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *TickerInformation) GetV() []*any.Any {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *TickerInformation) GetL() []*any.Any {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *TickerInformation) GetH() []*any.Any {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *TickerInformation) GetO() []*any.Any {
	if x != nil {
		return x.O
	}
	return nil
}

func (self *TickerInformation) TypeCode() uint32 {
	return TickerInformationTypeCode
}

type TickerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId         uint32             `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TickerInformation *TickerInformation `protobuf:"bytes,2,opt,name=TickerInformation,proto3" json:"TickerInformation,omitempty"`
	ChannelName       string             `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Pair              string             `protobuf:"bytes,4,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *TickerMessage) Reset() {
	*x = TickerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerMessage) ProtoMessage() {}

func (x *TickerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerMessage.ProtoReflect.Descriptor instead.
func (*TickerMessage) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{4}
}

func (x *TickerMessage) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TickerMessage) GetTickerInformation() *TickerInformation {
	if x != nil {
		return x.TickerInformation
	}
	return nil
}

func (x *TickerMessage) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *TickerMessage) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (self *TickerMessage) TypeCode() uint32 {
	return TickerMessageTypeCode
}

var File_kraken_proto protoreflect.FileDescriptor

var file_kraken_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x17, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e,
	0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x17, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01,
	0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x61, 0x12, 0x22, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x62, 0x12, 0x22, 0x0a, 0x01, 0x76,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x76, 0x12,
	0x22, 0x0a, 0x01, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x01, 0x6c, 0x12, 0x22, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x68, 0x12, 0x22, 0x0a, 0x01, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0d,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kraken_proto_rawDescOnce sync.Once
	file_kraken_proto_rawDescData = file_kraken_proto_rawDesc
)

func file_kraken_proto_rawDescGZIP() []byte {
	file_kraken_proto_rawDescOnce.Do(func() {
		file_kraken_proto_rawDescData = protoimpl.X.CompressGZIP(file_kraken_proto_rawDescData)
	})
	return file_kraken_proto_rawDescData
}

var file_kraken_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kraken_proto_goTypes = []interface{}{
	(*KrakenSubscriptionData)(nil),  // 0: golang.example.policy.KrakenSubscriptionData
	(*KrakenWsMessageIncoming)(nil), // 1: golang.example.policy.KrakenWsMessageIncoming
	(*KrakenWsMessageOutgoing)(nil), // 2: golang.example.policy.KrakenWsMessageOutgoing
	(*TickerInformation)(nil),       // 3: golang.example.policy.TickerInformation
	(*TickerMessage)(nil),           // 4: golang.example.policy.TickerMessage
	(*any.Any)(nil),                 // 5: google.protobuf.Any
}
var file_kraken_proto_depIdxs = []int32{
	0, // 0: golang.example.policy.KrakenWsMessageIncoming.subscription:type_name -> golang.example.policy.KrakenSubscriptionData
	0, // 1: golang.example.policy.KrakenWsMessageOutgoing.subscription:type_name -> golang.example.policy.KrakenSubscriptionData
	5, // 2: golang.example.policy.TickerInformation.a:type_name -> google.protobuf.Any
	5, // 3: golang.example.policy.TickerInformation.b:type_name -> google.protobuf.Any
	5, // 4: golang.example.policy.TickerInformation.v:type_name -> google.protobuf.Any
	5, // 5: golang.example.policy.TickerInformation.l:type_name -> google.protobuf.Any
	5, // 6: golang.example.policy.TickerInformation.h:type_name -> google.protobuf.Any
	5, // 7: golang.example.policy.TickerInformation.o:type_name -> google.protobuf.Any
	3, // 8: golang.example.policy.TickerMessage.TickerInformation:type_name -> golang.example.policy.TickerInformation
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_kraken_proto_init() }
func file_kraken_proto_init() {
	if File_kraken_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kraken_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenSubscriptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenWsMessageIncoming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenWsMessageOutgoing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kraken_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kraken_proto_goTypes,
		DependencyIndexes: file_kraken_proto_depIdxs,
		MessageInfos:      file_kraken_proto_msgTypes,
	}.Build()
	File_kraken_proto = out.File
	file_kraken_proto_rawDesc = nil
	file_kraken_proto_goTypes = nil
	file_kraken_proto_depIdxs = nil
}

const KrakenSubscriptionDataTypeCode uint32 = 2070342764
const KrakenWsMessageIncomingTypeCode uint32 = 298791295
const KrakenWsMessageOutgoingTypeCode uint32 = 3458440579
const TickerInformationTypeCode uint32 = 69303350
const TickerMessageTypeCode uint32 = 1132147928

//true
//true
//false
//false
type KrakenSubscriptionDataWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *KrakenSubscriptionData
}

func (self *KrakenSubscriptionDataWrapper) Message() interface{} {
	return self.Data
}

func (self *KrakenSubscriptionDataWrapper) messageWrapper() interface{} {
	return self
}

func NewKrakenSubscriptionDataWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *KrakenSubscriptionData) *KrakenSubscriptionDataWrapper {
	return &KrakenSubscriptionDataWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	KrakenSubscriptionDataTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &KrakenSubscriptionData{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*KrakenSubscriptionData); ok {
				return NewKrakenSubscriptionDataWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type KrakenWsMessageIncomingWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *KrakenWsMessageIncoming
}

func (self *KrakenWsMessageIncomingWrapper) Message() interface{} {
	return self.Data
}

func (self *KrakenWsMessageIncomingWrapper) messageWrapper() interface{} {
	return self
}

func NewKrakenWsMessageIncomingWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *KrakenWsMessageIncoming) *KrakenWsMessageIncomingWrapper {
	return &KrakenWsMessageIncomingWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	KrakenWsMessageIncomingTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &KrakenWsMessageIncoming{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*KrakenWsMessageIncoming); ok {
				return NewKrakenWsMessageIncomingWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type KrakenWsMessageOutgoingWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *KrakenWsMessageOutgoing
}

func (self *KrakenWsMessageOutgoingWrapper) Message() interface{} {
	return self.Data
}

func (self *KrakenWsMessageOutgoingWrapper) messageWrapper() interface{} {
	return self
}

func NewKrakenWsMessageOutgoingWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *KrakenWsMessageOutgoing) *KrakenWsMessageOutgoingWrapper {
	return &KrakenWsMessageOutgoingWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	KrakenWsMessageOutgoingTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &KrakenWsMessageOutgoing{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*KrakenWsMessageOutgoing); ok {
				return NewKrakenWsMessageOutgoingWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type TickerInformationWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *TickerInformation
}

func (self *TickerInformationWrapper) Message() interface{} {
	return self.Data
}

func (self *TickerInformationWrapper) messageWrapper() interface{} {
	return self
}

func NewTickerInformationWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *TickerInformation) *TickerInformationWrapper {
	return &TickerInformationWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	TickerInformationTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &TickerInformation{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*TickerInformation); ok {
				return NewTickerInformationWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})

//true
//true
//false
//false
type TickerMessageWrapper struct {
	goprotoextra.BaseMessageWrapper
	Data *TickerMessage
}

func (self *TickerMessageWrapper) Message() interface{} {
	return self.Data
}

func (self *TickerMessageWrapper) messageWrapper() interface{} {
	return self
}

func NewTickerMessageWrapper(
	cancelCtx context.Context,
	cancelFunc context.CancelFunc,
	toReactor goprotoextra.ToReactorFunc,
	toConnection goprotoextra.ToConnectionFunc,
	data *TickerMessage) *TickerMessageWrapper {
	return &TickerMessageWrapper{
		BaseMessageWrapper: goprotoextra.NewBaseMessageWrapper(
			cancelCtx,
			cancelFunc,
			toReactor,
			toConnection),
		Data: data,
	}
}

var _ = stream.Register(
	TickerMessageTypeCode,
	stream.TypeCodeData{
		CreateMessage: func() proto1.Message {
			return &TickerMessage{}
		},
		CreateWrapper: func(
			cancelCtx context.Context,
			cancelFunc context.CancelFunc,
			toReactor goprotoextra.ToReactorFunc,
			toConnection goprotoextra.ToConnectionFunc,
			data proto1.Message) (goprotoextra.IMessageWrapper, error) {
			if msg, ok := data.(*TickerMessage); ok {
				return NewTickerMessageWrapper(
					cancelCtx,
					cancelFunc,
					toReactor,
					toConnection,
					msg), nil
			}
			return nil, goerrors.InvalidParam
		}})
